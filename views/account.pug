//- var basepath = basepath

extends layout

block content

  div(class="ui width aligned padded grid")
    div(class="fourteen column")
      h4(class="ui header") 
        i(class="blue angle double down icon")
        if account.isContract
          | Contract #{account.address}
        else
          | Account #{account.address}
      table(class="ui blue very compact table")
        tbody
          tr
            td(class="ui sub header") Balance:
            td #{ethformatter(account.balance)}
            td(class="ui sub header") Token Balance:
            td #{tokenformatter.format(balance.balance)}

  div(class="ui width aligned padded grid")
    div(class="fourteen column")
      div(class="ui top attached tabular menu")
        a(class="item active" data-tab="Transactions") Transactions
        if account.isContract
          a(class="item active" data-tab="Code") Code
        if account.source
          a(class="item active" data-tab="Source") Source
          a(class="item active" data-tab="Contract") Contract State
      div(class="ui bottom attached tab segment active" data-tab="Transactions")
        h4(class="ui header") 
          i(class="yellow angle double down icon")
          | Recent Activity
        table(class="ui blue very compact table")
          thead
            tr
              th Hash
              th Block
              th Type
              th
              th From
              th To
              th Amount
          tbody
            for block in account.blocks
              for trace in block
                if trace.type === "reward" && trace.action.author === account.address
                  tr
                    td
                      a(href=basepath + "/block/" + trace.blockNumber) #{trace.blockHash.substr(0, 10)}...
                    td
                      a(href=basepath + "/block/" + trace.blockNumber) #{trace.blockNumber}
                    td Mining Reward
                    td
                    td New Coins
                    td
                      a(href=basepath + "/account/" + trace.action.author) #{nameformatter.format(trace.action.author)}
                    td #{ethformatter(trace.action.value)}
                else if trace.type !== "reward"
                  tr
                    td
                      a(href=basepath + "/tx/" + trace.transactionHash)  #{trace.transactionHash.substr(0, 10)}...
                    td
                      a(href=basepath + "/block/" + trace.blockNumber) #{trace.blockNumber}
                    td.capitalize
                      if trace.error
                        span(style="color: red", data-toggle="tooltip", data-placement="left", title=trace.error).glyphicon.glyphicon-warning-sign
                      |  #{trace.type}
                    if trace.type === "call"
                      td
                        if trace.action.from === account.address
                          span.glyphicon.glyphicon-export(style="color: red;")
                        else
                          span.glyphicon.glyphicon-import(style="color: green;")
                      td
                        a(href=basepath + "/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                      td
                        a(href=basepath + "/account/" + trace.action.to) #{nameformatter.format(trace.action.to)}
                      td #{ethformatter(trace.action.value)}
                    else if trace.type === "create"
                      td
                        if trace.action.from === account.address
                          span.glyphicon.glyphicon-export(style="color: red;")
                        else
                          span.glyphicon.glyphicon-import(style="color: green;")
                      td
                        a(href=basepath + "/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                      td
                        a(href=basepath + "/account/" + trace.result.address) #{nameformatter.format(trace.result.address)}
                      td #{ethformatter(trace.action.value)}
                    else if trace.type === "suicide"
                      td
                        if trace.action.address === account.address
                          span.glyphicon.glyphicon-export(style="color: red;")
                        else
                          span.glyphicon.glyphicon-import(style="color: green;")
                      td
                        a(href=basepath + "/account/" + trace.action.address) #{nameformatter.format(trace.action.address)}
                      td
                        a(href=basepath + "/account/" + trace.action.refundAddress) #{nameformatter.format(trace.action.refundAddress)}
                      td #{ethformatter(trace.action.balance)}

        h4(class="ui header") 
          i(class="yellow angle double down icon")
          | ERC-20 Transactions
        table(class="ui blue very compact table")
          thead
            tr
              th Type
              th From
              th To
              th Amount
              th Date
          tbody
            for event in events
              +event_row(event)
      if account.isContract
        div(class="ui bottom attached tab segment" data-tab="Code")
          h3 Code
          if !account.source
            a(href=basepath + "/contract/verify") Upload source
          pre #{account.code}
      if account.source
        div(class="ui bottom attached tab segment" data-tab="Source")
          h4 Source
          pre #{account.source.source}
          h4 ABI
          pre #{account.source.abi}
          h4 Constructor
          pre #{account.source.constructorArgs}
        div(class="ui bottom attached tab segment" data-tab="Contract")
          h4 Current contract state
          table.table
            thead
              tr
                th Function
                th Result
            tbody
              for item in account.contractState
                tr
                  td #{item.name}
                  td #{item.result}
